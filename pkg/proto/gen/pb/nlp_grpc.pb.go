// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: nlp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NLPServiceClient is the client API for NLPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NLPServiceClient interface {
	MatchScenario(ctx context.Context, in *MatchScenarioRequest, opts ...grpc.CallOption) (*MatchScenarioResponse, error)
	ExtractArguments(ctx context.Context, in *ExtractArgumentsRequest, opts ...grpc.CallOption) (*ExtractArgumentsResponse, error)
}

type nLPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNLPServiceClient(cc grpc.ClientConnInterface) NLPServiceClient {
	return &nLPServiceClient{cc}
}

func (c *nLPServiceClient) MatchScenario(ctx context.Context, in *MatchScenarioRequest, opts ...grpc.CallOption) (*MatchScenarioResponse, error) {
	out := new(MatchScenarioResponse)
	err := c.cc.Invoke(ctx, "/NLPService/MatchScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPServiceClient) ExtractArguments(ctx context.Context, in *ExtractArgumentsRequest, opts ...grpc.CallOption) (*ExtractArgumentsResponse, error) {
	out := new(ExtractArgumentsResponse)
	err := c.cc.Invoke(ctx, "/NLPService/ExtractArguments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NLPServiceServer is the server API for NLPService service.
// All implementations must embed UnimplementedNLPServiceServer
// for forward compatibility
type NLPServiceServer interface {
	MatchScenario(context.Context, *MatchScenarioRequest) (*MatchScenarioResponse, error)
	ExtractArguments(context.Context, *ExtractArgumentsRequest) (*ExtractArgumentsResponse, error)
	mustEmbedUnimplementedNLPServiceServer()
}

// UnimplementedNLPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNLPServiceServer struct {
}

func (UnimplementedNLPServiceServer) MatchScenario(context.Context, *MatchScenarioRequest) (*MatchScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchScenario not implemented")
}
func (UnimplementedNLPServiceServer) ExtractArguments(context.Context, *ExtractArgumentsRequest) (*ExtractArgumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractArguments not implemented")
}
func (UnimplementedNLPServiceServer) mustEmbedUnimplementedNLPServiceServer() {}

// UnsafeNLPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NLPServiceServer will
// result in compilation errors.
type UnsafeNLPServiceServer interface {
	mustEmbedUnimplementedNLPServiceServer()
}

func RegisterNLPServiceServer(s grpc.ServiceRegistrar, srv NLPServiceServer) {
	s.RegisterService(&NLPService_ServiceDesc, srv)
}

func _NLPService_MatchScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPServiceServer).MatchScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NLPService/MatchScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPServiceServer).MatchScenario(ctx, req.(*MatchScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLPService_ExtractArguments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractArgumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPServiceServer).ExtractArguments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NLPService/ExtractArguments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPServiceServer).ExtractArguments(ctx, req.(*ExtractArgumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NLPService_ServiceDesc is the grpc.ServiceDesc for NLPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NLPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NLPService",
	HandlerType: (*NLPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchScenario",
			Handler:    _NLPService_MatchScenario_Handler,
		},
		{
			MethodName: "ExtractArguments",
			Handler:    _NLPService_ExtractArguments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp.proto",
}
