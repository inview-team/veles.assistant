// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: matcher.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatcherClient is the client API for Matcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatcherClient interface {
	MatchScenario(ctx context.Context, in *MatchScenarioRequest, opts ...grpc.CallOption) (*MatchScenarioResponse, error)
}

type matcherClient struct {
	cc grpc.ClientConnInterface
}

func NewMatcherClient(cc grpc.ClientConnInterface) MatcherClient {
	return &matcherClient{cc}
}

func (c *matcherClient) MatchScenario(ctx context.Context, in *MatchScenarioRequest, opts ...grpc.CallOption) (*MatchScenarioResponse, error) {
	out := new(MatchScenarioResponse)
	err := c.cc.Invoke(ctx, "/Matcher/MatchScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatcherServer is the server API for Matcher service.
// All implementations must embed UnimplementedMatcherServer
// for forward compatibility
type MatcherServer interface {
	MatchScenario(context.Context, *MatchScenarioRequest) (*MatchScenarioResponse, error)
	mustEmbedUnimplementedMatcherServer()
}

// UnimplementedMatcherServer must be embedded to have forward compatible implementations.
type UnimplementedMatcherServer struct {
}

func (UnimplementedMatcherServer) MatchScenario(context.Context, *MatchScenarioRequest) (*MatchScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchScenario not implemented")
}
func (UnimplementedMatcherServer) mustEmbedUnimplementedMatcherServer() {}

// UnsafeMatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatcherServer will
// result in compilation errors.
type UnsafeMatcherServer interface {
	mustEmbedUnimplementedMatcherServer()
}

func RegisterMatcherServer(s grpc.ServiceRegistrar, srv MatcherServer) {
	s.RegisterService(&Matcher_ServiceDesc, srv)
}

func _Matcher_MatchScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherServer).MatchScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Matcher/MatchScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherServer).MatchScenario(ctx, req.(*MatchScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matcher_ServiceDesc is the grpc.ServiceDesc for Matcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Matcher",
	HandlerType: (*MatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchScenario",
			Handler:    _Matcher_MatchScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matcher.proto",
}
