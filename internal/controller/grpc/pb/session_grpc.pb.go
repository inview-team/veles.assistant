// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: session.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionHandlerClient is the client API for SessionHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionHandlerClient interface {
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	UpdateSessionToken(ctx context.Context, in *UpdateSessionTokenRequest, opts ...grpc.CallOption) (*UpdateSessionTokenResponse, error)
}

type sessionHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionHandlerClient(cc grpc.ClientConnInterface) SessionHandlerClient {
	return &sessionHandlerClient{cc}
}

func (c *sessionHandlerClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, "/session.SessionHandler/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionHandlerClient) UpdateSessionToken(ctx context.Context, in *UpdateSessionTokenRequest, opts ...grpc.CallOption) (*UpdateSessionTokenResponse, error) {
	out := new(UpdateSessionTokenResponse)
	err := c.cc.Invoke(ctx, "/session.SessionHandler/UpdateSessionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionHandlerServer is the server API for SessionHandler service.
// All implementations must embed UnimplementedSessionHandlerServer
// for forward compatibility
type SessionHandlerServer interface {
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	UpdateSessionToken(context.Context, *UpdateSessionTokenRequest) (*UpdateSessionTokenResponse, error)
	mustEmbedUnimplementedSessionHandlerServer()
}

// UnimplementedSessionHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedSessionHandlerServer struct {
}

func (UnimplementedSessionHandlerServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedSessionHandlerServer) UpdateSessionToken(context.Context, *UpdateSessionTokenRequest) (*UpdateSessionTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionToken not implemented")
}
func (UnimplementedSessionHandlerServer) mustEmbedUnimplementedSessionHandlerServer() {}

// UnsafeSessionHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionHandlerServer will
// result in compilation errors.
type UnsafeSessionHandlerServer interface {
	mustEmbedUnimplementedSessionHandlerServer()
}

func RegisterSessionHandlerServer(s grpc.ServiceRegistrar, srv SessionHandlerServer) {
	s.RegisterService(&SessionHandler_ServiceDesc, srv)
}

func _SessionHandler_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionHandlerServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionHandler/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionHandlerServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionHandler_UpdateSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionHandlerServer).UpdateSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionHandler/UpdateSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionHandlerServer).UpdateSessionToken(ctx, req.(*UpdateSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionHandler_ServiceDesc is the grpc.ServiceDesc for SessionHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.SessionHandler",
	HandlerType: (*SessionHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _SessionHandler_StartSession_Handler,
		},
		{
			MethodName: "UpdateSessionToken",
			Handler:    _SessionHandler_UpdateSessionToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
